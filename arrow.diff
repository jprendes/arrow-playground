diff --git a/src/main.cpp b/src/main.cpp
index 2129066..3feb87c 100644
--- a/src/main.cpp
+++ b/src/main.cpp
@@ -11,62 +11,35 @@
 #include <iostream>
 #include <sstream>
 
-int main(int argc, char ** argv) {
+#include <emscripten.h>
 
-    arrow::Environment environment(std::cout);
-    // Load program file when an argument is provided
-    if(argc > 1) {
-        try {
-            std::ifstream in(argv[1]);
+extern "C" {
 
-            // First parse program args
-            if(argc > 2) {
-                std::stringstream in;
-                int i = 2;
-                for(; i < argc - 1; ++i) {
-                    in << argv[i] << " ";
-                }
-                in << argv[i];
-                auto argTokens = arrow::Lexer::tokenize(in);
-                arrow::Parser p(argTokens, environment);
-                p.parseProgramArguments();
-            }
+EMSCRIPTEN_KEEPALIVE
+void eval(char const * program, char const * arguments) {
+    std::stringstream prog(program), args(arguments);
 
-            // Now parse actual program
-            auto tokens = arrow::Lexer::tokenize(in);
-            arrow::Parser p(tokens, environment);
-            p.parse();
-            auto start = p.getStartStatement();
-            if(start) {
-                start->getEvaluator()->evaluate(environment);
-            }
-        } catch (std::exception const & e) {
-            std::cout<<"\u001b[31;1mError: \u001b[0m";
-            std::cout<<e.what()<<std::endl;
-        }
-        return 0;
-    }
-    // else run in interactive mode
-    std::cout<<"\nArrow v0.1\n\n"<<std::endl;
-    while(true) {
-        std::cout<<">> ";
-        std::string com;
-        std::getline (std::cin, com);
-        if (com == "quit") {
-            exit(0);
+    arrow::Environment environment(std::cout);
+    try {
+        // First parse program args
+        if(!args.str().empty()) {
+            auto argTokens = arrow::Lexer::tokenize(args);
+            arrow::Parser p(argTokens, environment);
+            p.parseProgramArguments();
         }
-        std::stringstream ss(com);
-        auto tokens = arrow::Lexer::tokenize(ss);
-        arrow::Parser parser(tokens, environment);
-        try {
-            parser.parse();
-            auto statements = parser.getStatements();
-            for(auto const & s : statements) {
-                s->getEvaluator()->evaluate(environment);
-            }
-        } catch (arrow::LanguageException const & e) {
-            std::cout<<e.report(false)<<std::endl;
+
+        // Now parse actual program
+        auto tokens = arrow::Lexer::tokenize(prog);
+        arrow::Parser p(tokens, environment);
+        p.parse();
+        auto start = p.getStartStatement();
+        if(start) {
+            start->getEvaluator()->evaluate(environment);
         }
+    } catch (std::exception const & e) {
+        std::cout<<"\u001b[31;1mError: \u001b[0m";
+        std::cout<<e.what()<<std::endl;
     }
-    return 0;
-}
\ No newline at end of file
+}
+
+}
diff --git a/src/representation/real.hpp b/src/representation/real.hpp
index bd1a993..38809ca 100644
--- a/src/representation/real.hpp
+++ b/src/representation/real.hpp
@@ -3,5 +3,5 @@
 namespace arrow {
 	// Default precision for double. Might want to
 	// compiler-switch on this (@jp)
-	using real = long double;
-}
\ No newline at end of file
+	using real = double;
+}
diff --git a/src/utility/ThreadManager.cpp b/src/utility/ThreadManager.cpp
index 784e0ef..6c22a19 100644
--- a/src/utility/ThreadManager.cpp
+++ b/src/utility/ThreadManager.cpp
@@ -3,19 +3,29 @@
 #include "ThreadManager.hpp"
 
 namespace arrow {
+#if defined(ARROW_ASYNC)
     std::vector<std::thread> ThreadManager::m_threads;
+#endif
     void ThreadManager::create(std::function<void()> f)
     {
+#if defined(ARROW_ASYNC)
         m_threads.emplace_back(std::move(f));
+#else
+        f();
+#endif
     }
     void ThreadManager::joinAll()
     {
+#if defined(ARROW_ASYNC)
         for(auto & t : m_threads) {
             t.join();
         }
+#endif
     }
     void ThreadManager::clear()
     {
+#if defined(ARROW_ASYNC)
         m_threads.clear();
+#endif
     }
-}
\ No newline at end of file
+}
diff --git a/src/utility/ThreadManager.hpp b/src/utility/ThreadManager.hpp
index 7955531..904b2f0 100644
--- a/src/utility/ThreadManager.hpp
+++ b/src/utility/ThreadManager.hpp
@@ -3,9 +3,12 @@
 #pragma once
 
 #include <functional>
-#include <thread>
 #include <vector>
 
+#if defined(ARROW_ASYNC)
+#include <thread>
+#endif
+
 namespace arrow {
 
     /// A hacky global thread manager for handling threads
@@ -16,6 +19,8 @@ namespace arrow {
         static void joinAll();
         static void clear();
       private:
+#if defined(ARROW_ASYNC)
         static std::vector<std::thread> m_threads;
+#endif
     };
-}
\ No newline at end of file
+}
